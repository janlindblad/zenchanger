# Generated by Django 5.2.4 on 2025-08-31 12:22

import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_historicallocation_display_name_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('expected_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('weekday', models.CharField(blank=True, choices=[('MON', 'Monday'), ('TUE', 'Tuesday'), ('WED', 'Wednesday'), ('THU', 'Thursday'), ('FRI', 'Friday'), ('SAT', 'Saturday'), ('SUN', 'Sunday')], help_text='Day of the week for recurring events', max_length=3, null=True)),
                ('recurrence', models.CharField(blank=True, choices=[('irregular', 'Irregular'), ('weekly', 'Weekly'), ('monthly-first', 'Monthly (1st weekday)'), ('monthly-second', 'Monthly (2nd weekday)'), ('monthly-third', 'Monthly (3rd weekday)'), ('monthly-last', 'Monthly (last weekday)')], help_text='How often the event recurs', max_length=15, null=True)),
                ('recur_from', models.DateField(blank=True, help_text='Start date for recurring events', null=True)),
                ('recur_until', models.DateField(blank=True, help_text='End date for recurring events', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_plans', to='core.country')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_plans', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_plans', to='core.location')),
                ('organizers', models.ManyToManyField(related_name='event_plans', to='core.organization')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='plan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='core.eventplan'),
        ),
        migrations.AddField(
            model_name='historicalevent',
            name='plan',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.eventplan'),
        ),
        migrations.CreateModel(
            name='EventRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('participants', models.PositiveIntegerField(blank=True, null=True)),
                ('data', models.JSONField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='records', to='core.event')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalEventPlan',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('expected_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('weekday', models.CharField(blank=True, choices=[('MON', 'Monday'), ('TUE', 'Tuesday'), ('WED', 'Wednesday'), ('THU', 'Thursday'), ('FRI', 'Friday'), ('SAT', 'Saturday'), ('SUN', 'Sunday')], help_text='Day of the week for recurring events', max_length=3, null=True)),
                ('recurrence', models.CharField(blank=True, choices=[('irregular', 'Irregular'), ('weekly', 'Weekly'), ('monthly-first', 'Monthly (1st weekday)'), ('monthly-second', 'Monthly (2nd weekday)'), ('monthly-third', 'Monthly (3rd weekday)'), ('monthly-last', 'Monthly (last weekday)')], help_text='How often the event recurs', max_length=15, null=True)),
                ('recur_from', models.DateField(blank=True, help_text='Start date for recurring events', null=True)),
                ('recur_until', models.DateField(blank=True, help_text='End date for recurring events', null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('country', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.country')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.location')),
            ],
            options={
                'verbose_name': 'historical event plan',
                'verbose_name_plural': 'historical event plans',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
